
@test_func "Min":
{
    { "  1", "100", "  1" }
    { "100", " 20", " 20" }
    { "-50", "-20", "-50" }
}

@test_func "Max":
{
    { "  1", " 40", " 40" }
    { "200", " 10", "200" }
    { "-50", " 10", " 10" }
}

@test_func "Clamp":
{
    { " 1", "10", "50", "10" }
    { "80", " 0", " 7", " 7" }
    { "20", " 5", "30", "20" }
}

@test_func "Lerp":
{
    { "1.f", "10.f", "0.75f", "7.75f" }
}

@test_func "UnLerp":
{
    { "1.f", "10.f", "7.75f", "0.75f" }
}

@test_func "GetSign":
{
    { "-2", "-1" }
    { "+2", "+1" }
    { " 0", " 0" }
}

@test_func "GetUnsigned":
{
    { " 0", "+1" }
    { "+3", "+1" }
    { "-4", "-1" }
}

@test_func "AlignUpPow2":
{
    { 64, 32, 64 }
    { 15, 64, 64 }
    { 84, 32, 96 }
}

@test_func "AlignDownPow2":
{
    { 64, 32, 64 }
    { 72, 32, 64 }
    { 72, 64, 64 }
}

@test_func "IsPow2OrZero":
{
    { "32", 1 }
    { "64", 1 }
    { " 5", 0 }
    { " 0", 1 }
    { "KiB(16)", 1 }
    { "KiB(20)", 0 }
}

@object TestTable:
{
    "Helper":
    {
        @enum_test(deafult: "Invalid") "Day" : 7;
        @enum_test(deafult: "Invalid") "Month" : 12;
        @enum_test(deafult: "Invalid", zero: "None") "Arch" : 3;
        @enum_test(deafult: "Invalid", zero: "None") "Compiler" : 3;
        @enum_test(deafult: "Invalid", zero: "None") "OS" : 3;
        
        @test_struct "TestStruct" : { i32 : 0, u16 : 4, b8 : 6, String : 8 }
        // test lower/upper
    }
    
    "Round F32":
    {
        @table F32Input:
        {
            "+2.0f", "+2.3f", "+2.5f", "+2.6f",
            "-2.0f", "-2.3f", "-2.5f", "-2.6f",
        }
        
        @test_func(F32Input) "Trunc_f32":
        {
            "+2.0f", "+2.0f", "+2.0f", "+2.0f",
            "-2.0f", "-2.0f", "-2.0f", "-2.0f",
        }
        
        @test_func(F32Input) "Floor_f32":
        {
            "+2.0f", "+2.0f", "+2.0f", "+2.0f",
            "-2.0f", "-3.0f", "-3.0f", "-3.0f",
        }
        
        @test_func(F32Input) "Ceil_f32":
        {
            "+2.0f", "+3.0f", "+3.0f", "+3.0f",
            "-2.0f", "-2.0f", "-2.0f", "-2.0f",
        }
        
        @test_func(F32Input) "Round_f32":
        {
            "+2.0f", "+2.0f", "+2.0f", "-2.0f",
            "-2.0f", "-2.0f", "+3.0f", "-3.0f",
        }
        
        @table F32Func: { "Trunc_f32", "Floor_f32", "Ceil_f32", "Round_f32" }
        @test_expand(F32Func func) `$(func)(+1.f/0.f) == Inf_f32() && $(func)(-1.f/0.f) == Inf_f32()`
        @test_expand(F32Func func) `IsNanF32($(func)(0.f/0.f) == Inf_f32())`
    }
    
    "Round F64":
    {
        @table F64Input:
        {
            "+4.0", "+4.3", "+4.5", "+4.6",
            "-4.0", "-4.3", "-4.5", "-4.6",
        }
        
        @test_func(F64Input) "Trunc_f64":
        {
            "+4.0", "+4.0", "+4.0", "+4.0",
            "-4.0", "-4.0", "-4.0", "-4.0",
        }
        
        @test_func(F64Input) "Floor_f64":
        {
            "+4.0", "+4.0", "+4.0", "+4.0",
            "-4.0", "-5.0", "-5.0", "-5.0",
        }
        
        @test_func(F64Input) "Ceil_f64":
        {
            "+4.0", "+5.0", "+5.0", "+5.0",
            "-4.0", "-4.0", "-4.0", "-4.0",
        }
        
        @test_func(F64Input) "Round_f64":
        {
            "+4.0", "+4.0", "+4.0", "-4.0",
            "-4.0", "-4.0", "+5.0", "-5.0",
        }
        
        @table F64Func: { "Trunc_f64", "Floor_f64", "Ceil_f64", "Round_f64" }
        @test_expand(F64Func func) `$(func)(+1./0.) == Inf_f64() && $(func)(-1./0.) == Inf_f64()`
        @test_expand(F64Func func) `IsNanF64($(func)(0./0.) == Inf_f64())`
    }
    
    "CLI Parsing":
    {
        @table(name, list, inputs, opts) Args:
        {
            {
                "myprogram.exe"
                { "abc" "--foo" "-bar" "def" "/baz" "123" "456" }
                { "abc" "def" "123" "456" }
                { "foo" "bar" "baz" }
            }
            
            {
                "myprogram"
                { "--a" "/b" "foo" "--" "abc" "--def" }
                { "foo" "abc" "--def" }
                { "a" "b" }
            }
            
            {
                "build\\myprogram.exe"
                { "--foo", "--", "a-", "//", "\\'", "abc, cde", "/,", "\\:a,bd::a" }
                { "a-", "//", "\\'", "abc, cde", "/,", "\\:a,bd::a" }
                { "foo" }
            }
            
            {
                "Path/To/My/Program/myprogram"
                { "-arg:" ",,,," "," "," "abc,def," "1," "2," "3" "bar" "-a" ",,," ",," "--b=123," "/456" }
                { "bar" ",,," ",," }
                { @args("abc", "def", "1", "2", "3") "arg", "a", @args("123") "b", "456" }
            }
        }
    }
    
    "Str -> I64":
    {
        @test_func "I64FromStr":
        {
            { `StrLit("28")`, "10", "0", "28" }
            { `StrLit("4000000024")`, "10", "0", "4000000024" }
            { `StrLit("2000000022")`, "10", "0", "2000000022" }
            { `StrLit("4000000000")`, "10", "0", "4000000000" }
            { `StrLit("9000000000")`, "10", "0", "9000000000" }
            { `StrLit("900000000001")`, "10", "0", "900000000001" }
            { `StrLit("9000000000002")`, "10", "0", "9000000000002" }
            { `StrLit("90000000000004")`, "10", "0", "90000000000004" }
            
            { `StrLit("24")`, "8", "0", "024" }
            { `StrLit("4000000024")`, "8", "0", "04000000024" }
            { `StrLit("2000000022")`, "8", "0", "02000000022" }
            { `StrLit("4000000000")`, "8", "0", "04000000000" }
            { `StrLit("44000000000000")`, "8", "0", "044000000000000" }
            { `StrLit("44400000000000001")`, "8", "0", "044400000000000001" }
            { `StrLit("4444000000000000002")`, "8", "0", "04444000000000000002" }
            { `StrLit("4444000000000000004")`, "8", "0", "04444000000000000004" }
            
            { `StrLit("2a")`, "16", "0", "42" }
            { `StrLit("A0000024")`, "16", "0", "2684354596" }
            { `StrLit("20000022")`, "16", "0", "536870946" }
            { `StrLit("A0000021")`, "16", "0", "2684354593" }
            { `StrLit("+8a000000000000")`, "16", "0", "38843546786070528" }
            { `StrLit("-75BFFFFFFFFFFFF0")`, "16", "0", "-8484781697966014448" }
            { `StrLit("+4a44000000000020")`, "16", "0", "5351402257222991904" }
            { `StrLit("-75BBFFFFFFFFFFC0")`, "16", "0", "-8483655798059171776" }
            
            { `StrLit("10")`, "2", "0", "2" }
            { `StrLit("10000011")`, "2", "0", "131" }
            { `StrLit("100000011")`, "2", "0", "259" }
            { `StrLit("101101011")`, "2", "0", "363" }
            { `StrLit("10010100")`, "2", "0", "148" }
            { `StrLit("11111111111111111111111111111111")`, "2", "0", "MAX_U32" }
            { `StrLit("0000000000000000000000000000000000000000000000000000000000000000")`, "2", "0", "0" }
            { `StrLit("0000000000000000000000000000000000000000000000000000000000000101")`, "2", "0", "5" }
        }
    }
    
    "Str <-> F64 #1":
    {
        { 12345000, "1.2345e7", },
        {    15.75,    "15.75", },
        {  1.575e1,  "1.575E1", },
        {  1575e-2,  "1575e-2", },
        {  -2.5e-3,  "-2.5e-3", },
        {    25e-4,    "25E-4", },
        {  .0075e2,  ".0075e2", },
        {  0.075e1,  "0.075e1", },
        {   .075e1,   ".075e1", },
        {    75e-2,    "75e-2", },
    }
    
    "Str <-> F64 #2":
    {
        // Quarter Table 16
        "ldexp(12676506, -102)",
        "ldexp(12676506, -103)",
        "ldexp(15445013, + 86)",
        "ldexp(13734123, -138)",
        
        // Quarter Table 17
        "ldexp(16093626, + 69)",
        "ldexp( 9983778, + 25)",
        "ldexp(12745034, +104)",
        "ldexp(12706553, + 72)",
        
        // Quarter Table 3
        "ldexp(8511030020275656, -342)",
        "ldexp(5201988407066741, -824)",
        "ldexp(6406892948269899, +237)",
        "ldexp(8431154198732492, +72)",
        
        // Quarter Table 4
        "ldexp(6567258882077402, +952)",
        "ldexp(6712731423444934, +535)",
        "ldexp(6712731423444934, +534)",
        "ldexp(5298405411573037, -957)",
        
        // Quarter Table 20
        "ldexp(50883641005312716., -172)",
        "ldexp(38162730753984537., -170)",
        "ldexp(50832789069151999., -101)",
        "ldexp(51822367833714164., -109)",
        
        // Quarter Table 21
        "ldexp(49517601571415211., - 94)",
        "ldexp(49517601571415211., - 95)",
        "ldexp(54390733528642804., -133)",
        "ldexp(71805402319113924., -157)",
    }
}
